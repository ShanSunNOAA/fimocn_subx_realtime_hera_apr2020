#!/bin/ksh --login

# NOTE: When run via Rocoto, this script's output will be in FIMwfm/logs/post.
# Also see FIMwfm/logs/workflow for general Rocoto messages.

CONTEXT="batchTemplate-post"

test -n "$WFM" && print "Rocoto FIM_RUN: $FIM_RUN"

# For WFM runs, enter the appropriate run directory.

if [[ -n "$WFM" && -n "$FIM_HOME" ]]
then
  cd $FIM_RUN || fail "Cannot cd to $FIM_RUN."
fi

if [[ -n "$WFM" ]]
then
  . $FIM_RUN/functions.ksh
  load_modules
fi

ksh_insist # Ensure that we are running in ksh93 

# The fim output files produced by COMPARE_VAR-enabled runs cannot be (reliably)
# processed by pop, so don't try.

if ( test -n "$COMPARE_VAR_ON" && logically_true "$COMPARE_VAR_ON" )
then
  print "COMPARE_VAR is enabled: skipping post..."
  return 0
fi

# Run batchTemplate-setup if it has not already been run.

test -z "$batchTemplate_setup_ran" && xsource ./batchTemplate-setup

# Run batchTemplate-FIMY_ENKF-files if appropriate.
#print $PWD | grep -v "/FIMYENS/" | grep -q "/FIMY/" && xsource ./batchTemplate-FIMY_ENKF-files

# Enter the appropriate run directory (as defined by batchTemplate-setup).

FIMRUN="$PWD"
cd $DIR || fail "Cannot cd to $DIR."

# Make the post directory. For WFM runs, the post directory should already
# exist except for the first incremental batch and mkdir's -p option exits
# with success if the directory already exists.

mkdir -p $POST || fail "Cannot make directory $POST."

# Copy namelist from the appropriate fim directory.

if [[ -d "$FIMDIR" ]]
then
  cp $fimnamelist $POST/$NLFILE || \
    fail "Cannot copy $fimnamelist -> $POST/$NLFILE."
else
  cp $FIM/$NLFILE $POST || fail "Cannot copy $FIM/$NLFILE -> $POST."
fi

cp $fimgribtable $POST/fim_gribtable || \
  fail "Cannot copy $fimgribtable $POST/fim_gribtable."

cp $reduceinput $POST/REDUCEinput || \
  fail "Cannot copy $reduceinput $POST/REDUCEinput."

# Enter the post directory.

cd $POST || fail "Cannot cd to $POST."

get_nl_value "$fimnamelist" ISOBARICnamelist isobaric_levels_file ISOBARIC_LEVELS_FILE

cp $PREP/$ISOBARIC_LEVELS_FILE $POST/$ISOBARIC_LEVELS_FILE || \
  fail "Cannot copy $ISOBARIC_LEVELS_FILE $POST/$ISOBARIC_LEVELS_FILE."

# Link files.

test -f pop || linksafe $FIMRUN/pop
test -f reduce || linksafe $FIMRUN/reduce
test -f pop_read_init || linksafe $FIMRUN/pop_read_init
test -f "$INFO_FILE" || linksafe $PREP/$INFO_FILE
#linksafe $PREP/grid_???_coeffs 
ln -s $PREP/grid_???_coeffs ./

get_nl_value "$fimnamelist" POSTnamelist gribout GRIBOUT
test -z "$GRIBOUT" && fail "Could not get gribout from $fimnamelist."

get_nl_value "$fimnamelist" POSTnamelist fimout FIMOUT
test -z "$FIMOUT" && fail "Could not get fimout from $fimnamelist."

# For WFM runs, for now just run as always, regardless of the value of gribout.
# Will soon want to modify post/postall for WFM case to not run pop

if [[ -n "$WFM" ]]
then
# do WFM post sequence
  if ( logically_true "$GRIBOUT" == "t" )
  then 
    FIM_POST_GRIB1_DIR=$POST/fim/NAT/grib1
    if [[ ! -d "$FIM_POST_GRIB1_DIR" ]]
    then
      fail "$FIM_POST_GRIB1_DIR should have been created by batchTemplate-setup - NOT HERE!!!!"
    fi
    # not fimy_enkf
    print $PWD | grep -v "/FIMYENS/" | grep -q "/FIMY/"
    if [[ $? -eq 1 ]]; then

      # mv grib files to post directory
      T1=$(print $T1 | sed 's/^0\{1,2\}\(.*\)/\1/')
      T2=$(print $T2 | sed 's/^0\{1,2\}\(.*\)/\1/')
      test -z "$T1" && T1=0
      test -z "$T2" && T2=0
      print "T1=$T1"
      print "T2=$T2"
      t=$T1
      #Get yyjjjHHMM
      datestr=$(print ${yyyymmddhhmm} | sed 's/^\([0-9]\{4\}\)\([0-9]\{2\}\)\([0-9]\{2\}\)\([0-9]\{2\}\)\([0-9]\{2\}\)/\1\/\2\/\3 \4\:\5/')
      yyjjjhhmm=$(date +%y%j%H%M -d "${datestr}")
      while [ $t -le $T2 ]; do
         # Move the output to the post dir
        filename=$(printf "${yyjjjhhmm}%04d" $t)
        print "file to be moved to post: $filename"
        mv $DIR/fim_$MEMBER_ID/$filename $FIM_POST_GRIB1_DIR/$filename
        # JKH:  Try making links in fim_C directory pointing to post_C directory to see if this does anything when
        #       post* jobs fail and do not get resubmitted....
        ln -s $FIM_POST_GRIB1_DIR/$filename $DIR/fim_$MEMBER_ID/$filename 
        (( t=t+${FCST_INTERVAL} ))
      done
    fi
  fi # not FIMY_ENKF
  if ( logically_true "$FIMOUT" || logically_true "$GRIBOUT" )
  then
    echo "in batchTemplate-post, FCST_LENGTH = ${FCST_LENGTH}"
    export FCST_LENGTH=${FCST_LENGTH}
    xsource $FIM_RUN/batchTemplate-postall
  else
    fail "cannot run batchTemplate-postall when GRIBOUT == FALSE and FIMOUT == FALSE"
  fi
else
# qsubfim case: if gribout was set, just link the grib files.
# Otherwise, run pop as before to create the grib files.
  if ( logically_true "$GRIBOUT" )
  then
    ln -s ../fim/[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9] .
  elif ( logically_true "$FIMOUT" )
  then
    popbin=pop_read_init # or pop
    ./$popbin >stdout 2>&1 || fail "$popbin failed."
    cat stdout
  else
    fail "cannot run pop when FIMOUT == FALSE."
  fi
fi

cd $FIMRUN || fail "Cannot cd to $FIMRUN."

print "\npost finished\n"

return 0
