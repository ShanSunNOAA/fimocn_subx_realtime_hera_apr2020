# Target being built (i.e. as defined by makefim <target>)
MAKEFIM_TARGET = stampedexeonphi

# Preprocessor and flags
CPP = /lib/cpp
CPPFLAGS = -C -P

CC               = cc
CDEBUG           = -g
CFLAGS           = -O2 -mmic
COL_FFLAGS       = -r8
FDEBUG           = -O0 -g -traceback -C -fpe0 -ftz
FFLAGS_MIC       = -mmic
FFLAGS_NO_DEBUG  = $(PREP_FFLAGS)
FIM_FFLAGS       = $(FFLAGS_MIC)
FIXEDFLAG        = -fixed
FREEFLAG         = -free
GPTL_FLAGS       =
GRIBIO_CPPFLAGS  = -DSUN
ICOSIO_FFLAGS    =
INCNETCDF        = -I$(TACC_NETCDF_DIR)/include
LIBNETCDF        = -L$(TACC_NETCDF_DIR)/lib -lnetcdff
LINKFLAGS        = $(LINK_FLAGS_NOESMF)
LINKLIBS         = $(LINK_LIBS_NOESMF)
NEMS             =
POST_FFLAGS      = -O2
PREP_FFLAGS      = -O2 -fp-model precise
SP_FFLAGS        = -O2
W3_FFLAGS        = $(PREP_FFLAGS)

# Compile-time flag to enable debug print for PrintIpnDiag
DEBUGPRINT = no
ifeq ($(DEBUGPRINT),yes)
  CPPFLAGS += -DDEBUGPRINT
endif

# Number of parallel tasks for gmake
GMAKEMINUSJ = -j8

# Record control word flag (currently required only by gfortran: specifies 4-byte RCW)
RCWFLAG =

# Flag to ensure local variables in routines in threaded regions are on thread-stack
THREADSTACKFLAG = -recursive

# Flag to enable OpenMP in dynamics and ss2icos
# GCCOMPFLAG assumes C compiler is gcc
OPENMP = yes
ifeq ($(OPENMP),yes)
  CPPFLAGS += -DWHOLE_MODEL_OMP -D_OPENMP
  OMPFLAG = -openmp
  GCCOMPFLAG = -fopenmp
else
# Flag to enable OpenMP in ss2icos only: Set to "no" only if failures in ss2icos occur
  OPENMP_SS2ICOS = yes
  ifeq ($(OPENMP_SS2ICOS),yes)
    CPPFLAGS += -D_OPENMP
    OMPFLAG_SS2ICOS = -openmp
    GCCOMPFLAG = -fopenmp
  endif
endif

# Turn off some stuff (e.g. requiring a non-existent netcdf build for MIC) if needed
DOSSFC2ICOS = no

# Optimization flags
OPTFLAGS = -O3

# MIC flags (empty when not running on the MIC)
MICFLAGS = -mmic

# Load flags. In most cases this can be empty due to the use of MPI compiler wrappers
LDFLAGS = $(MICFLAGS)

# To turn on debugging, set DEBUG = yes. When -g is specified, ifort defaults to
# -O0, but this may be overriden here, in OPTFLAGS.
DEBUG = no
ifeq ($(DEBUG),yes)
  OPTFLAGS = -fp-model precise -g -O0 -traceback -check all -ftz -ftrapuv
endif

# gfortran doesn't provide all degree-based trig functions as intrinsics
# Most compilers provide these and it is safe to set NEED_SINDCOSD = no
NEED_SINDCOSD = no

# To enable attaching a debugger such as gdb or ddd to a running process, set ATTACH_DEBUGGER = yes
ATTACH_DEBUGGER = no

# Default to using dummy GPTL stubs

GPTL_CPPFLAGS = -I../../dummygptl
GPTL_LDFLAGS = -L../../dummygptl -lgptl

# Set "USE_GPTL = yes" to use the real GPTL

USE_GPTL = yes
ifeq ($(USE_GPTL),yes)
  ifeq ($(P),p) # parallel build
    # Set include path for GPTL
    GPTLROOT = /home1/02455/tg817513/gptl-v5.3.2/xeonphi_mpi
    GPTL_CPPFLAGS = -I$(GPTLROOT)/include
    # For auto-profiling of MPI functions, set USE_PMPI=yes. The name of the GPTL
    # library in this case is libgptl_pmpi.a. Otherwise the name is libgptl.a
    USE_PMPI = no
    ifeq ($(USE_PMPI),yes)
      GPTL_LDFLAGS = -L$(GPTLROOT)/lib -lgptl_pmpi
    # When auto-profiling the MPI layer, set HAVE_IARGCGETARG=yes if the Fortran
    # compiler supports functions iargc and getarg.
      HAVE_IARGCGETARG = no
    else
      GPTL_LDFLAGS = -L$(GPTLROOT)/lib -lgptl
    endif
    # AUTOINST=yes enables function-level compiler-generated auto-profiling,
    AUTOINST = no
    ifeq ($(AUTOINST),yes)
      GPTL_FFLAGS = -finstrument-functions -g -O2
      GPTL_LDFLAGS += -finstrument-functions
    endif
    # If GPTL was built with PAPI support, add the required flags
    # On zeus, "module load papi" provides $PAPI_ROOT
    HAVE_PAPI = no
    ifeq ($(HAVE_PAPI),yes)
      GPTL_LDFLAGS += -L$(PAPI_ROOT)/lib -lpapi
    endif
  else # serial build
  endif
endif

# NCAR Graphics wrapper script
FCncarg = ncargf90.intel

# SMS settings

# MPI include location
INCMPI=$(I_MPI_ROOT)/include64
# Ruby interpreter location
export SMS__RUBY=/home1/02455/tg817513/ruby-1.9.3/bin/ruby
# SMS library location
ifeq ($(USE_GPTL),yes)
# If available, use SMS version compiled with auto-profiling flag
  SMS = /work/02455/tg817513/smsxeonphi_r797
else
  SMS = /work/02455/tg817513/smsxeonphi_r797
endif
